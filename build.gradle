plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.springdoc.openapi-gradle-plugin" version "1.7.0"
	id "jacoco"
	id "org.sonarqube" version "5.0.0.4638"

}

group = 'br.com.fiap.lanchonete'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.7"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.modelmapper:modelmapper:2.4.4'
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws-messaging', version: '2.2.1.RELEASE'
	implementation 'com.amazonaws:aws-java-sdk-sns:1.12.118'
	implementation 'com.amazonaws:aws-java-sdk-core:1.12.118'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	//runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
	manifest {
		attributes 'Main-Class': 'br.com.fiap.lanchonete.ProducaoServiceFase4Application'
	}

	from sourceSets.main.output
}

test {
	useJUnitPlatform()
	include '**/*Test.class', '**/*Tests.class', '**/*TestSuite.class' , '**/CocumberTest.class'

	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat = 'full'
	}

	finalizedBy jacocoTestReport

}

sonar {
	properties {
		property "sonar.projectKey", "FIAP-GRUPO-G57_producao-service-fase-4"
		property "sonar.organization", "fiap-grupo-g57"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.token", System.getenv("SONAR_TOKEN")
		property("sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
		property "sonar.coverage.exclusions", "**/mappers/**,**/validations/**,**/exception/**,**/configuration/**"
	}
}


jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		xml.outputLocation = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")

	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/mappers/**', '**/validations/**', '**/exception/**', '**/configuration/**'])
		}))
	}
}


tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}